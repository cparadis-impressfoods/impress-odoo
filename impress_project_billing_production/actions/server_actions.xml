<?xml version='1.0' encoding="utf-8"?>
<odoo><data>
    <record id="action_create_task" model="ir.actions.server">
        <field name="name">Create task from production</field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">list,form</field>
        <field name="state">code</field>
        <field name="code">
            for record in records:
                #Create the sales line on the related project's billing SO
                sale_order = record.x_related_project.x_billing_so
                sale_order_line = None
                
                #Check if production already has a related task

                if not record.x_related_task:
                    
                    #Check if the SO is locked and prevent adding products to it if it is
                    if sale_order.locked:
                        raise UserError("Cannot add a production to a locked SO")

                    #Get the correct product to add to the SO
                    product_internal_ref = record.product_id.default_code
                    
                    if not product_internal_ref:
                        raise UserError('Product internal reference could not be found')
                        
                    #To find the correct service associated with the produced product, swap the first letter of the internal reference to an 'S'
                    service_internal_ref = 'S'+product_internal_ref[1:]
                    
                    service_product_id = env['product.product'].search([('default_code','=', service_internal_ref)]).id

                    if not service_product_id:
                        raise UserError('Service_product_id is not set')
                    
                    if sale_order:
                        sale_order_line = env['sale.order.line'].create({
                            'product_id': service_product_id,
                            'order_id': sale_order.id,
                            'analytic_distribution': {record.x_related_project.analytic_account_id.id: 100.0},
                            'product_uom_qty': record.product_qty
                        })

                    #Create the task
                    task = env['project.task'].create({
                        'name': "{} - {}".format(record.display_name, record.product_id.display_name),
                        'project_id': record.x_related_project.id,
                        'allocated_hours': record.product_qty,
                        "sale_line_id": sale_order_line.id
                    })
                    
                    record.write({'x_related_task': task.id})
        </field>
    </record>

    <record id="action_update_task" model="ir.actions.server">
        <field name="name">Update task from production</field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">list,form</field>
        <field name="state">code</field>
        <field name="code">
        for record in records:
            task = record.x_related_task
            if len(task.timesheet_ids) == 1:
                timesheet = task.timesheet_ids[0]
                timesheet.write({'unit_amount': record.qty_produced})
        
            else:
                employee = env['hr.employee'].search([('name', '=', 'Impress')])
                if len(employee) &gt; 0:
                    employee = employee[0]
                else:
                    raise UserError("Employee impress doesn't exist")

                timesheet = env['account.analytic.line'].create({
                    'name': record.name,
                    'is_timesheet': True,
                    'employee_id': employee.id,
                    'task_id': task.id,
                    'unit_amount': record.qty_produced,
                    'so_line': task.sale_line_id.id,
                })

            if task.sale_line_id[0].qty_delivered == 0:
                task.sale_line_id[0].write({'qty_delivered': record.qty_produced})
            task.write({'state': '1_done'})
        </field>
    </record>

    <record id="action_create_project" model="ir.actions.server">
        <field name="name">Create project from SO</field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="binding_view_types">list,form</field>
        <field name="state">code</field>
        <field name="code">
        for record in records:
    
            # TODO: Allow dynamic analytical plans based on the customer invoiced. Adding a related_partner field to the analytical plan model and searching for a matching plan
            # when creating the analytical account could allow for dynamical plans
            
            # Check if analycal account for the PO already exists. If it doesn't, create one.
            # Currently, the analytical plan used is hardcoded for Pulp and Press.

            analytic_account = env['account.analytic.account'].search([('name','=', "{} - {}".format(record.partner_id.display_name, record.client_order_ref))])
            if len(analytic_account) == 1:
                analytic_account = analytic_account[0]
            else:
                analytic_plan = env['account.analytic.plan'].search([('name', '=', "Pulp &amp; Press")])
                if len(analytic_plan) &gt; 0:
                    analytic_plan = analytic_plan[0]
                else:
                    raise UserError("Analytic plan doesn't exist")
                
                analytic_account = env['account.analytic.account'].create({
                    'name': "{} - {}".format(record.partner_id.display_name, record.client_order_ref),
                    'plan_id': analytic_plan.id,
                    'code': record.client_order_ref,
                    'partner_id': record.partner_id.id
                })
            
            
            # Check if the project for the PO already exists. If it doesn't, create one.
            
            project = env['project.project'].search([('name','=', "{} - {}".format(record.partner_id.display_name, record.client_order_ref))])
            if len(project) == 1:
                project = project[0]
            else:
                # A basic project template is used here:
                #   We label the tasks productions 
                #   We make the project billables, remove milestones, ratings, dependencies and documents.
                #   We set the analytical account to the one created before and set the project partner to the SO partner
                #   We name the project "Client - Customer Reference"
                #   We set a custom field 'x_billing_so' to the SO creating the project. This will be used to force the tasks billing SO to this SO

                project = env['project.project'].create({
                    'name': "{} - {}".format(record.partner_id.display_name, record.client_order_ref),
                    'partner_id': record.partner_id.id,
                    #'date': record.commitment_date,
                    #'date_start': record.date_order,
                    'label_tasks': "Productions",
                    'analytic_account_id': analytic_account.id,
                    'allow_milestones': False,
                    'allow_task_dependencies': False,
                    'allow_billable': True,
                    'allow_rating': False,
                    'use_documents': False,
                    'x_billing_so': record.id
                    })
            
            record.write({'project_id': project.id})
        
        </field>
    </record>
</data></odoo>